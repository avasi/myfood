@model IEnumerable<myfoodapp.Hub.Models.ProductionUnit>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div id="main-section-header" class="row">
    <h2 id="title" class="col-md-3">Production Units List</h2>
    <div style="clear:both;"></div>
</div>

<div id="productionUnits-grid" class="main-section-content row">
    <div id="productionUnits-details" class="col-md-2">
        <h3 class="section-header">Manage Production Units from Pioneer Citizen Network</h3>
    </div>
    <div id="grid-container" class="col-md-10" style="padding-bottom:40px">
        @(Html.Kendo().Grid<myfoodapp.Hub.Models.ProductionUnitViewModel>()
        .Name("grid")
        .Columns(columns =>
        {
            columns.ForeignKey(c => c.ownerId, (System.Collections.IEnumerable)ViewData["owners"], "Id", "pioneerCitizenName").Title("owner").Groupable(false).Width(130);
            columns.Bound(c => c.info).Width(175).MinScreenWidth(380).Groupable(false);
            columns.Bound(c => c.startDate).Format("{0:d}").Width(80).MinScreenWidth(380).Groupable(false);
            columns.ForeignKey(c => c.productionUnitTypeId, (System.Collections.IEnumerable)ViewData["productionUnitTypes"], "Id", "name").Title("prod. type").Width(100).MinScreenWidth(380);
            //columns.Bound(c => c.locationLatitude).Width(80).Title("lat.").HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Groupable(false).MinScreenWidth(380);
            //columns.Bound(c => c.locationLongitude).Width(80).Title("long.").HtmlAttributes(new { style = "text-align:center" }).HeaderHtmlAttributes(new { style = "text-align:center" }).Groupable(false).MinScreenWidth(380);
            //columns.Bound(c => c.version).Width(80).HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:right" }).MinScreenWidth(380);
            columns.ForeignKey(c => c.productionUnitStatusId, (System.Collections.IEnumerable)ViewData["productionUnitStatus"], "Id", "name").Title("status").Width(120);
            columns.Bound(c => c.lastMeasureReceived).Format("{0:g}").Width(110).Title("last measure").MinScreenWidth(380).Groupable(false);
            columns.Bound(c => c.reference).Width(60).Title("ref.").HtmlAttributes(new { style = "text-align:right" }).HeaderHtmlAttributes(new { style = "text-align:right" }).Groupable(false).MinScreenWidth(380);
            columns.Command(command => command.Custom("Details").Click("showDetails")).Width(70);
            //columns.Command(command => { command.Edit(); command.Destroy(); }).Width(250);
            //columns.Command(command => { command.Destroy(); }).Width(250);
        })
        //.ToolBar(toolbar =>
        //{
        //    toolbar.Create();
        //    toolbar.Save();
        //})
        .HtmlAttributes(new { style = "height: 80vh;" })
        //.Editable(editable => editable.Mode(GridEditMode.PopUp).TemplateName("ProductionUnitEditTemplate"))
        //.Editable(editable => editable.Mode(GridEditMode.InCell))
        .Scrollable()
        //.Filterable()
        .Groupable()
        //.ColumnMenu()
        //.Pageable(pageable => pageable
        //    .Refresh(true)
        //    .PageSizes(true)
        //    .ButtonCount(5))
        //.Events(events => events.DataBound("onDatabound"))
        .DataSource(dataSource => dataSource
            .Ajax()
            //.PageSize(15)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(c => c.Id);
                model.Field(c => c.Id).Editable(false);
                model.Field(c => c.startDate).Editable(false);
                model.Field(c => c.reference).Editable(false);
                model.Field(c => c.locationLatitude).Editable(false);
                model.Field(c => c.locationLongitude).Editable(false);
                model.Field(c => c.version).Editable(false);
                model.Field(c => c.info).Editable(false);
                model.Field(c => c.productionUnitTypeId).DefaultValue(1);
                model.Field(c => c.ownerId).DefaultValue(1);
            })
            .Events(events =>  events.Error("error_handler"))
            //.Create("Editing_Create", "ProductionUnits")
            .Read("Editing_Read", "ProductionUnits")
        //.Update("Editing_Update", "ProductionUnits")
        //.Destroy("Editing_Destroy", "ProductionUnits")
        )
        )
    </div>
</div>

    <script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var measure = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function() {
                        measure += this + "\n";
                    });
                }
            });
            alert(measure);
        }
    }

    function onDatabound(e) {
        $("k-grid-ViewDetails").addClass("k-grid-button");
    }

    function showDetails(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location = window.location.origin + "/ProductionUnits/Details/" + dataItem.Id;
    }
    </script>

    <style>
        .k-button {
            color: #018001;
            background-color: #018001;
        }

        /*.k-grouping-header {
        display:none;
        }*/

    </style>

